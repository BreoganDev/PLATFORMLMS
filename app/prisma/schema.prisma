generator client {
    provider = "prisma-client-js"
    binaryTargets = ["native", "linux-musl-arm64-openssl-3.0.x"]
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  STUDENT
}

enum OrderStatus {
  PENDING
  PAID
  REFUNDED
}

enum EnrollmentStatus {
  ACTIVE
  REFUNDED
}

enum CourseLevel {
  BEGINNER
  INTERMEDIATE
  ADVANCED
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          Role      @default(STUDENT)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts      Account[]
  sessions      Session[]
  createdCourses Course[] @relation("CourseInstructor")
  enrollments   Enrollment[]
  progress      Progress[]
  orders        Order[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Category {
  id          String   @id @default(cuid())
  name        String   @unique
  slug        String   @unique
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  courses Course[]
}

model Course {
  id          String      @id @default(cuid())
  title       String
  slug        String      @unique
  description String?     @db.Text
  coverImage  String?
  level       CourseLevel @default(BEGINNER)
  isPublished Boolean     @default(false)
  price       Float       @default(0)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  categoryId   String
  category     Category @relation(fields: [categoryId], references: [id])
  instructorId String
  instructor   User     @relation("CourseInstructor", fields: [instructorId], references: [id])

  modules     Module[]
  enrollments Enrollment[]
  orders      Order[]
}

model Module {
  id         String   @id @default(cuid())
  title      String
  orderIndex Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  courseId String
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  lessons Lesson[]
}

model Lesson {
  id              String   @id @default(cuid())
  title           String
  content         String?  @db.Text
  vimeoVideoId    String?
  durationSeconds Int      @default(0)
  orderIndex      Int
  isFreePreview   Boolean  @default(false)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  moduleId String
  module   Module @relation(fields: [moduleId], references: [id], onDelete: Cascade)

  progress Progress[]
}

model Enrollment {
  id         String           @id @default(cuid())
  status     EnrollmentStatus @default(ACTIVE)
  enrolledAt DateTime         @default(now())

  userId String
  user   User   @relation(fields: [userId], references: [id])

  courseId String
  course   Course @relation(fields: [courseId], references: [id])

  orderId String?
  order   Order?  @relation(fields: [orderId], references: [id])

  @@unique([userId, courseId])
}

model Progress {
  id             String    @id @default(cuid())
  isCompleted    Boolean   @default(false)
  secondsWatched Int       @default(0)
  completedAt    DateTime?

  userId String
  user   User   @relation(fields: [userId], references: [id])

  lessonId String
  lesson   Lesson @relation(fields: [lessonId], references: [id])

  @@unique([userId, lessonId])
}

model Order {
  id              String      @id @default(cuid())
  totalAmount     Float
  status          OrderStatus @default(PENDING)
  stripeSessionId String?     @unique
  createdAt       DateTime    @default(now())

  userId String
  user   User   @relation(fields: [userId], references: [id])

  courseId String
  course   Course @relation(fields: [courseId], references: [id])

  enrollments Enrollment[]
}
